var express, router, mongoose, passport, jwt, auth,
    Post, Comment, User;

express = require('express');
router = express.Router();
mongoose = require('mongoose');
passport = require('passport');
jwt = require('express-jwt');

Post = mongoose.model('Post');
Comment = mongoose.model('Comment');
User = mongoose.model('User');

// Create a middleware for authentication jwt tokens in routes/index.js
auth = jwt({secret: 'SECRET', userProperty: 'payload'});

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'Express' });
});

/* POST /register - creates a user given a username and a password */
router.post('/register', function(req, res, next){
  var user;

  if(!req.body.username || !req.body.password) {
    return res.status(400).json({message: 'Please fill out all fields'});
  }

  user = new User();
  user.username = req.body.username;
  user.setPassword(req.body.password);
  user.save(function(err) {
    if(err) { return next(err); }

    return res.json({token: user.generateJWT()});
  });
});

/* POST /login - authenticates the user and returns a token to the client */
router.post('/login', function(req, res, next) {
  if(!req.body.username || !req.body.password) {
    return res.status(400).json({message: 'Please fill out all fields'});
  }

  passport.authenticate('local', function(err, user, info) {
    if(err) { return next(err); }

    if(!user) {
      return res.status(401).json(info);
    }

    return res.json({token: user.generateJWT()});
  })(req, res, next);
});

/* GET /posts - return a list of posts and associated metadata */
router.get('/posts', function (req, res, next) {
  Post.find(function(err, posts) {
    if (err) { return next(err); }

    res.json(posts);
  });
});

/* POST /posts - create a new post */
router.post('/posts', auth, function (req, res, next) {
  var post = new Post(req.body);
  post.author = req.payload.username;

  post.save(function(err, post) {
    if (err) { return next(err); }

    res.json(post);
  });
});

/* Post param */
router.param('post', function(req, res, next, id) {
  var query = Post.findById(id);

  query.exec(function (err, post) {
    if(err) { return next(err); }
    if(!post) { return next(new Error('can\'t find post')); }

    req.post = post;
    return next();
  });
});

/* GET /posts/:id - return an individual post with associated comments */
router.get('/posts/:post', function(req, res, next) {
  req.post.populate('comments', function(err, post) {
    if(err) { return next(err); }

    res.json(post);
  });
});

/* PUT /posts/:id/upvote - upvote a post, notice we use the post ID in the URL */
router.put('/posts/:post/upvote', auth, function(req, res, next) {
  req.post.upvote(function(err, post) {
    if(err) { return next(err); }

    res.json(post);
  });
})

/* POST /posts/:id/comments - add a new comment to a post by ID */
router.post('/posts/:post/comments', auth, function(req, res, next) {
  var comment = new Comment(req.body);
  comment.post = req.post;
  comment.author = req.payload.username;

  comment.save(function(err, comment) {
    if(err) { return next(err); }

    req.post.comments.push(comment);
    req.post.save(function(err, post) {
      if(err) { return next(err); }

      res.json(comment);
    });
  });
});

/* Comment param */
router.param('comment', function(req, res, next, id) {
  var query = Comment.findById(id);

  query.exec(function (err, comment) {
    if(err) { return next(err); }
    if(!comment) { return next(new Error('can\'t find comment')); }

    req.comment = comment;
    return next();
  });
});

/* PUT /posts/:id/comments/:id/upvote - upvote a comment */
router.put('/posts/:post/comments/:comment/upvote', auth, function(req, res, next) {
  req.comment.upvote(function(err, comment) {
    if(err) { return next(err); }

    res.json(comment);
  });
});

module.exports = router;
