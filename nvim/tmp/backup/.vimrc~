"______ _      _        _   _   _             _
"| ___ (_)    | |      | | | | ( )           (_)
"| |_/ /_  ___| | _____| |_| |_|/ ___  __   ___ _ __ ___  _ __ ___
"|  __/| |/ __| |/ / _ \ __| __| / __| \ \ / / | '_ ` _ \| '__/ __|
"| |   | | (__|   <  __/ |_| |_  \__ \  \ V /| | | | | | | | | (__
"\_|   |_|\___|_|\_\___|\__|\__| |___/ (_)_/ |_|_| |_| |_|_|  \___|
"
" Setup Vundle  ----------------------------------------------------------{{{
" not a vi
set nocompatible
set encoding=utf-8

" start vundler
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" core
Bundle 'scrooloose/nerdtree'
Bundle 'vim-airline/vim-airline'
Bundle 'vim-airline/vim-airline-themes'
Bundle 'ryanoasis/vim-devicons'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'tomtom/tcomment_vim'
Bundle 'terryma/vim-multiple-cursors'
NeoBundle 'mhinz/vim-sayonara'
" syntax
Bundle 'othree/yajs.vim',{'autoload':{'filetypes':['javascript']}}
Bundle 'othree/jsdoc-syntax.vim', {'autoload':{'filetypes':['javascript']}}
Bundle 'othree/es.next.syntax.vim',{'autoload':{'filetypes':['javascript']}}
Bundle 'hail2u/vim-css3-syntax',{'autoload':{'filetypes':['css','sass']}}
Bundle 'elzr/vim-json', {'autoload':{'filetypes':['json']}}
Bundle 'vim-scripts/SyntaxRange'
Bundle 'tpope/vim-markdown'
Bundle 'suan/vim-instant-markdown'
Bundle 'tmhedberg/SimpylFold'
" colorscheme
Bundle 'nanotech/jellybeans.vim'
" git
Bundle 'tpope/vim-fugitive'
Bundle 'jreybert/vimagit'
Bundle 'Xuyuanp/nerdtree-git-plugin'
" utils
Bundle 'Raimondi/delimitMate'
Bundle 'valloric/MatchTagAlways'
Bundle "rhysd/clever-f.vim"
Bundle 'mattn/emmet-vim'
Bundle 'Chiel92/vim-autoformat'
Bundle 'ap/vim-css-color'
call neobundle#end()



" enable all the plugins
filetype plugin indent on

" }}}

" System Settings  ----------------------------------------------------------{{{
set clipboard+=unnamedplus
" Currently needed for neovim paste issue
set pastetoggle=<f5>
set nopaste
" Let airline tell me my status
set noshowmode
set noswapfile
filetype on
set conceallevel=0
" block select not limited by shortest line
set virtualedit=
set expandtab
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
" set autoindent
set ruler
set hidden
set ignorecase
set smartcase
set showmatch
set incsearch
set hls
set nu
set ls=2
" set cursorline
set nowrap
set backspace=indent,eol,start
set shell=/bin/zsh
set completeopt -=preview
set textwidth=150
set wildmenu
set ttyfast
set noshowmode
set cmdheight=1
set laststatus=2
set wrap linebreak nolist
" set wildmode=full
set mouse=a
" leader is ,
let mapleader = ','
" backup/persistance settings
set undodir=~/.vim/tmp/undo//
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//
set undofile
set backup
set writebackup
set noswapfile
" Remember cursor position between vim sessions
autocmd BufReadPost *
      \ if line("'\"") > 0 && line ("'\"") <= line("$") |
      \   exe "normal! g'\"" |
      \ endif
" center buffer around cursor when opening files
autocmd BufRead * normal zz
let g:jsx_ext_required = 0
set complete=.,w,b,u,t,k
let g:gitgutter_max_signs = 1000  " default value
let g:used_javascript_libs = 'angularjs,angularuirouter'
autocmd InsertEnter * let save_cwd = getcwd() | set autochdir
autocmd InsertLeave * set noautochdir | execute 'cd' fnameescape(save_cwd)
let g:indentLine_char='│'

" }}}

" System mappings  ----------------------------------------------------------{{{

" Fast saving and closing
nmap <leader>w :w!<cr>
nmap <leader>x :x<cr>

" Navigate betwen buffers with arrows
map <right> :bn<cr>
map <left> :bp<cr>

" move around windows
nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

" better scrolling
nnoremap <C-j> <C-d>
nnoremap <C-k> <C-u>

" consistent menu navigation
inoremap <C-j> <C-n>
inoremap <C-k> <C-p>

" intellij style autocomplete shortcut
inoremap <C-@> <C-x><C-o>
inoremap <C-Space> <C-x><C-o>

" Shortcut to cd to the directory of the current file
nnoremap <leader>cd :cd %:p:h<CR>

" No need for ex mode
nnoremap Q <nop>
" Navigate between display lines
noremap  <silent> k gk
noremap  <silent> j gj
noremap  <silent> <Home> g<Home>
noremap  <silent> <End>  g<End>
inoremap <silent> <Home> <C-o>g<Home>
inoremap <silent> <End>  <C-o>g<End>

" Alt+Shift+f to format code, requires formatters: read the docs
noremap <A-F> :Autoformat<CR>
noremap <Leader>f :Autoformat<CR>

noremap H ^
noremap L g_
nnoremap ; :
inoremap <c-f> <c-x><c-f>

" Copy to clipboard
vnoremap <C-c> "*y<CR>
vnoremap y "*y<CR>
nnoremap Y "*Y<CR>

" open vimrc
nnoremap <leader>V :e  ~/.nvimrc<CR>

" reload all open buffers
nnoremap <leader>ra :tabdo exec "windo e!"<CR>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" Align blocks of text and keep them selected
vmap < <gv
vmap > >gv
map <esc> :noh<cr>

nnoremap <leader>e :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

function! s:PlaceholderImgTag(size)
  let url = 'http://dummyimage.com/' . a:size . '/000000/555555'
  let [width,height] = split(a:size, 'x')
  execute "normal a<img src=\"".url."\" width=\"".width."\" height=\"".height."\" />"
endfunction
command! -nargs=1 PlaceholderImgTag call s:PlaceholderImgTag(<f-args>)
nmap <silent>gi <Plug>(nyaovim-popup-tooltip-open)
vmap <silent>gi <Plug>(nyaovim-popup-tooltip-open)
"}}}"

" Themes, Commands, etc  ----------------------------------------------------{{{
" Theme
syntax enable
set t_Co=256
colorscheme jellybeans
set background=dark
" no need to fold things in markdown all the time
let g:vim_markdown_folding_disabled = 1
" turn on spelling for markdown files
autocmd BufRead,BufNewFile *.md setlocal spell complete+=kspell
" disable markdown auto-preview. Gets annoying
let g:instant_markdown_autostart = 0
"}}}

" Folding  ------------------------------------------------------------------{{{

function! MyFoldText() " {{{
  let line = getline(v:foldstart)

  let nucolwidth = &fdc + &number * &numberwidth
  let windowwidth = winwidth(0) - nucolwidth - 3
  let foldedlinecount = v:foldend - v:foldstart

  " expand tabs into spaces
  let onetab = strpart('          ', 0, &tabstop)
  let line = substitute(line, '\t', onetab, 'g')

  let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
  let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
  return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}

function! JavaScriptFold() "{{{
  " syntax region foldBraces start=/{/ end=/}/ transparent fold keepend extend
  setlocal foldmethod=syntax
  setlocal foldlevel=99
  echo "hello"
  syn region foldBraces start=/{/ skip=/\(\/\/.*\)\|\(\/.*\/\)/ end=/}/ transparent fold keepend extend
endfunction "}}}

" function! HTMLFold() "{{{
"   " syn sync fromstart
"   set foldmethod=syntax
"   syn region HTMLFold start=+^<\([^/?!><]*[^/]>\)\&.*\(<\1\|[[:alnum:]]\)$+ end=+^</.*[^-?]>$+ fold transparent keepend extend
"   syn match HTMLCData "<!\[CDATA\[\_.\{-}\]\]>" fold transparent extend
"   syn match HTMLCommentFold "<!--\_.\{-}-->" fold transparent extend
" endfunction "}}}

set foldtext=MyFoldText()

autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif

autocmd FileType vim setlocal fdc=1
set foldlevel=99
" Space to toggle folds.
nnoremap <Space> za
vnoremap <Space> za
autocmd FileType vim setlocal foldmethod=marker
autocmd FileType vim setlocal foldlevel=0

" au FileType html call HTMLFold()
" autocmd FileType html setlocal foldmethod=syntax
autocmd FileType html setlocal fdl=99

" autocmd FileType javascript call JavaScriptFold()
autocmd FileType javascript,html,css,scss,typescript setlocal foldlevel=99
autocmd FileType javascript,typescript,css,scss,json setlocal foldmethod=marker
autocmd FileType javascript,typescript,css,scss,json setlocal foldmarker={,}
autocmd FileType coffee setl foldmethod=indent
" au FileType html nnoremap <buffer> <leader>F zfat
" }}}

" Plugins -------------------------------------------------------------------{{{

" NERDTree {{{

map <F1> :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let NERDTreeShowHidden=1
let g:NERDTreeWinSize=45
let g:NERDTreeAutoDeleteBuffer=1
" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', 'none')
call NERDTreeHighlightFile('md', 'blue', 'none', '#6699CC', 'none')
call NERDTreeHighlightFile('config', 'yellow', 'none', '#d8a235', 'none')
call NERDTreeHighlightFile('conf', 'yellow', 'none', '#d8a235', 'none')
call NERDTreeHighlightFile('json', 'green', 'none', '#d8a235', 'none')
call NERDTreeHighlightFile('html', 'yellow', 'none', '#d8a235', 'none')
call NERDTreeHighlightFile('css', 'cyan', 'none', '#5486C0', 'none')
call NERDTreeHighlightFile('scss', 'cyan', 'none', '#5486C0', 'none')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', 'none')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', 'none')
call NERDTreeHighlightFile('ts', 'Blue', 'none', '#6699cc', 'none')
call NERDTreeHighlightFile('ds_store', 'Gray', 'none', '#686868', 'none')
call NERDTreeHighlightFile('gitconfig', 'black', 'none', '#686868', 'none')
call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#7F7F7F', 'none')
"}}}

" Omni-complete {{{
let g:vimjs#casesensistive = 1
let g:vimjs#smartcomplete = 1
let g:tsuquyomi_disable_quickfix = 1
let g:vim_json_syntax_conceal = 0
autocmd FileType javascript setlocal completeopt+=menu,preview
" set completeopt+=menu,preview,noselect
set splitbelow
"}}}

" Emmet customization {{{
" Enable Emmet in all modes
" Remapping <C-y>, just doesn't cut it.
function! s:expand_html_tab()
  " try to determine if we're within quotes or tags.
  " if so, assume we're in an emmet fill area.
  let line = getline('.')
  if col('.') < len(line)
    let line = matchstr(line, '[">][^<"]*\%'.col('.').'c[^>"]*[<"]')
    if len(line) >= 2
      return "\<C-n>"
    endif
  endif
  " expand anything emmet thinks is expandable.
  if emmet#isExpandable()
    return "\<C-y>,"
  endif
  " return a regular tab character
  return "\<tab>"
endfunction
autocmd FileType html,markdown imap <buffer><expr><tab> <sid>expand_html_tab()
let g:user_emmet_mode='a'
let g:user_emmet_complete_tag = 1
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
"}}}

" clever_f {{{
" clever-f prompt
let g:clever_f_show_prompt = 1
let g:clever_f_across_no_line = 1
"}}}

" vim-airline {{{
let g:airline#extensions#tabline#enabled = 1
set hidden
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='powerlineish'
cnoreabbrev <expr> x getcmdtype() == ":" && getcmdline() == 'x' ? 'Sayonara' : 'x'
let g:airline#extensions#tabline#buffer_idx_mode = 1
"}}}

"}}}
