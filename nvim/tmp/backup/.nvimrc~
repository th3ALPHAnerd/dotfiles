" ______ _      _        _   _   _                    _
" | ___ (_)    | |      | | | | ( )                  (_)
" | |_/ /_  ___| | _____| |_| |_|/ ___     _ ____   ___ _ __ ___  _ __ ___
" |  __/| |/ __| |/ / _ \ __| __| / __|   | '_ \ \ / / | '_ ` _ \| '__/ __|
" | |   | | (__|   <  __/ |_| |_  \__ \  _| | | \ V /| | | | | | | | | (__
" \_|   |_|\___|_|\_\___|\__|\__| |___/ (_)_| |_|\_/ |_|_| |_| |_|_|  \___|
"

" Setup NeoBundle  ----------------------------------------------------------{{{
" If vundle is not installed, do it first
if (!isdirectory(expand("$HOME/.config/nvim/bundle/neobundle.vim")))
  call system(expand("mkdir -p $HOME/.confg/nvim/bundle"))
  call system(expand("git clone https://github.com/Shougo/neobundle.vim $HOME/.config/nvim/bundle/neobundle.vim"))
endif

set nocompatible

" Required:
set runtimepath+=~/.config/nvim/bundle/neobundle.vim/
" set runtimepath+=~/Github/deoplete-angular/

" Required:
call neobundle#begin(expand('~/.config/nvim/bundle/'))
let pluginsExist = 0
" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" core
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'ryanoasis/vim-devicons'
NeoBundle 'vim-airline/vim-airline'
NeoBundle 'vim-airline/vim-airline-themes'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'mhinz/vim-sayonara'
" syntax
NeoBundleLazy 'othree/yajs.vim',{'autoload':{'filetypes':['javascript']}}
NeoBundleLazy 'othree/jsdoc-syntax.vim', {'autoload':{'filetypes':['javascript']}}
NeoBundleLazy 'othree/es.next.syntax.vim',{'autoload':{'filetypes':['javascript']}}
NeoBundleLazy 'hail2u/vim-css3-syntax',{'autoload':{'filetypes':['css','sass']}}
" NeoBundle 'vim-scripts/SyntaxComplete'
" NeoBundle 'othree/javascript-libraries-syntax.vim'
" NeoBundle 'Quramy/tsuquyomi'
NeoBundleLazy 'elzr/vim-json', {'autoload':{'filetypes':['json']}}
NeoBundle 'vim-scripts/SyntaxRange'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'suan/vim-instant-markdown'
NeoBundle 'tmhedberg/SimpylFold'
" colorscheme
NeoBundle 'mhartington/oceanic-next'
NeoBundle 'nanotech/jellybeans.vim'
" NeoBundle 'Yggdroot/indentLine'
" git
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'jreybert/vimagit'
NeoBundle 'Xuyuanp/nerdtree-git-plugin'
" utils
NeoBundleLazy '1995eaton/vim-better-javascript-completion',{'autoload':{'filetypes':['javascript']}}
NeoBundle 'Raimondi/delimitMate'
NeoBundle 'valloric/MatchTagAlways'
NeoBundle 'benekastah/neomake'
NeoBundle "rhysd/clever-f.vim"
NeoBundle 'mattn/emmet-vim'
NeoBundle 'Chiel92/vim-autoformat'
NeoBundle 'ap/vim-css-color'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/unite-outline'
NeoBundle 'ujihisa/unite-colorscheme'
NeoBundle 'junkblocker/unite-codesearch'
NeoBundle 'Shougo/vimfiler.vim'
NeoBundle 'Shougo/vimproc.vim', {
      \ 'build' : {
      \     'windows' : 'tools\\update-dll-mingw',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'linux' : 'make',
      \     'unix' : 'gmake',
      \    },
      \ }
NeoBundle 'Shougo/deoplete.nvim'
NeoBundle 'Shougo/neco-vim'
NeoBundle 'Shougo/neoinclude.vim'
NeoBundleLazy 'ujihisa/neco-look',{'autoload':{'filetypes':['markdown','md']}}
NeoBundle 'zchee/deoplete-jedi'

NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'honza/vim-snippets'
NeoBundle 'matthewsimo/angular-vim-snippets'

" NeoBundle 'https://github.com/neovim/node-host'
NeoBundle 'rhysd/nyaovim-popup-tooltip'
call neobundle#end()

" Required:
filetype plugin indent on
let pluginsExist=1
NeoBundleCheck
" }}}

" System Settings  ----------------------------------------------------------{{{

" source ~/.local.vim
" Neovim Settings
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
let $NEOVIM_JS_DEBUG='nvimjs.log'
set clipboard+=unnamedplus
" Currently needed for neovim paste issue
set pastetoggle=<f5>
set nopaste
" Let airline tell me my status
set noshowmode
set noswapfile
filetype on
set conceallevel=0
" block select not limited by shortest line
set virtualedit=
set expandtab
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
" set autoindent
set ruler
set hidden
set ignorecase
set smartcase
set showmatch
set incsearch
set hls
set nu
set ls=2
" set cursorline
set nowrap
set backspace=indent,eol,start
set shell=/bin/zsh
set completeopt -=preview
set textwidth=150
set wildmenu
set ttyfast
set noshowmode
set cmdheight=1
set laststatus=2
set wrap linebreak nolist
" set wildmode=full
" leader is ,
let mapleader = ','
" backup/persistance settings
set undodir=~/.config/nvim/tmp/undo//
set backupdir=~/.config/nvim/tmp/backup//
set directory=~/.config/nvim/tmp/swap//
set undofile
set backup
set writebackup
set noswapfile
" Remember cursor position between vim sessions
autocmd BufReadPost *
      \ if line("'\"") > 0 && line ("'\"") <= line("$") |
      \   exe "normal! g'\"" |
      \ endif
" center buffer around cursor when opening files
autocmd BufRead * normal zz
let g:jsx_ext_required = 0
set complete=.,w,b,u,t,k
let g:gitgutter_max_signs = 1000  " default value
let g:used_javascript_libs = 'angularjs,angularuirouter'
autocmd InsertEnter * let save_cwd = getcwd() | set autochdir
autocmd InsertLeave * set noautochdir | execute 'cd' fnameescape(save_cwd)
let g:indentLine_char='│'
" enable deoplete
let g:deoplete#enable_at_startup = 1
let g:unite_source_codesearch_command = '$HOME/bin/csearch'
let g:table_mode_corner="|"

" }}}

" System mappings  ----------------------------------------------------------{{{

" Fast saving and closing
nmap <leader>w :w!<cr>
nmap <leader>x :x<cr>

" Navigate betwen buffers with arrows
map <right> :bn<cr>
map <left> :bp<cr>

" move around windows
nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

" better scrolling
nnoremap <C-j> <C-d>
nnoremap <C-k> <C-u>

" consistent menu navigation
inoremap <C-j> <C-n>
inoremap <C-k> <C-p>

" intellij style autocomplete shortcut
inoremap <C-@> <C-x><C-o>
inoremap <C-Space> <C-x><C-o>

" Shortcut to cd to the directory of the current file
nnoremap <leader>cd :cd %:p:h<CR>

" No need for ex mode
nnoremap Q <nop>
" Navigate between display lines
noremap  <silent> k gk
noremap  <silent> j gj
noremap  <silent> <Home> g<Home>
noremap  <silent> <End>  g<End>
inoremap <silent> <Home> <C-o>g<Home>
inoremap <silent> <End>  <C-o>g<End>

" Alt+Shift+f to format code, requires formatters: read the docs
noremap <A-F> :Autoformat<CR>
noremap <Leader>f :Autoformat<CR>

noremap H ^
noremap L g_
nnoremap ; :
inoremap <c-f> <c-x><c-f>

" Copy to clipboard
vnoremap <C-c> "*y<CR>
vnoremap y "*y<CR>
nnoremap Y "*Y<CR>

" open vimrc
nnoremap <leader>V :e  ~/.nvimrc<CR>

" reload all open buffers
nnoremap <leader>ra :tabdo exec "windo e!"<CR>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" Align blocks of text and keep them selected
vmap < <gv
vmap > >gv
map <esc> :noh<cr>

nnoremap <leader>e :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

function! s:PlaceholderImgTag(size)
  let url = 'http://dummyimage.com/' . a:size . '/000000/555555'
  let [width,height] = split(a:size, 'x')
  execute "normal a<img src=\"".url."\" width=\"".width."\" height=\"".height."\" />"
endfunction
command! -nargs=1 PlaceholderImgTag call s:PlaceholderImgTag(<f-args>)
nmap <silent>gi <Plug>(nyaovim-popup-tooltip-open)
vmap <silent>gi <Plug>(nyaovim-popup-tooltip-open)
"}}}"

" Themes, Commands, etc  ----------------------------------------------------{{{
" Theme
syntax enable
" set t_Co=256
colorscheme jellybeans
set background=dark
" no need to fold things in markdown all the time
let g:vim_markdown_folding_disabled = 1
" turn on spelling for markdown files
autocmd BufRead,BufNewFile *.md setlocal spell complete+=kspell
" disable markdown auto-preview. Gets annoying
let g:instant_markdown_autostart = 0
"}}}

" Folding  ------------------------------------------------------------------{{{

function! MyFoldText() " {{{
  let line = getline(v:foldstart)

  let nucolwidth = &fdc + &number * &numberwidth
  let windowwidth = winwidth(0) - nucolwidth - 3
  let foldedlinecount = v:foldend - v:foldstart

  " expand tabs into spaces
  let onetab = strpart('          ', 0, &tabstop)
  let line = substitute(line, '\t', onetab, 'g')

  let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
  let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
  return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}

function! JavaScriptFold() "{{{
  " syntax region foldBraces start=/{/ end=/}/ transparent fold keepend extend
  setlocal foldmethod=syntax
  setlocal foldlevel=99
  echo "hello"
  syn region foldBraces start=/{/ skip=/\(\/\/.*\)\|\(\/.*\/\)/ end=/}/ transparent fold keepend extend
endfunction "}}}

" function! HTMLFold() "{{{
"   " syn sync fromstart
"   set foldmethod=syntax
"   syn region HTMLFold start=+^<\([^/?!><]*[^/]>\)\&.*\(<\1\|[[:alnum:]]\)$+ end=+^</.*[^-?]>$+ fold transparent keepend extend
"   syn match HTMLCData "<!\[CDATA\[\_.\{-}\]\]>" fold transparent extend
"   syn match HTMLCommentFold "<!--\_.\{-}-->" fold transparent extend
" endfunction "}}}

set foldtext=MyFoldText()

autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif

autocmd FileType vim setlocal fdc=1
set foldlevel=99
" Space to toggle folds.
nnoremap <Space> za
vnoremap <Space> za
autocmd FileType vim setlocal foldmethod=marker
autocmd FileType vim setlocal foldlevel=0

" au FileType html call HTMLFold()
" autocmd FileType html setlocal foldmethod=syntax
autocmd FileType html setlocal fdl=99

" autocmd FileType javascript call JavaScriptFold()
autocmd FileType javascript,html,css,scss,typescript setlocal foldlevel=99
autocmd FileType javascript,typescript,css,scss,json setlocal foldmethod=marker
autocmd FileType javascript,typescript,css,scss,json setlocal foldmarker={,}
autocmd FileType coffee setl foldmethod=indent
" au FileType html nnoremap <buffer> <leader>F zfat
" }}}

" Plugins -------------------------------------------------------------------{{{

" NERDTree {{{

map <F1> :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let NERDTreeShowHidden=1
let g:NERDTreeWinSize=45
let g:NERDTreeAutoDeleteBuffer=1
" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', 'none')
call NERDTreeHighlightFile('md', 'blue', 'none', '#6699CC', 'none')
call NERDTreeHighlightFile('config', 'yellow', 'none', '#d8a235', 'none')
call NERDTreeHighlightFile('conf', 'yellow', 'none', '#d8a235', 'none')
call NERDTreeHighlightFile('json', 'green', 'none', '#d8a235', 'none')
call NERDTreeHighlightFile('html', 'yellow', 'none', '#d8a235', 'none')
call NERDTreeHighlightFile('css', 'cyan', 'none', '#5486C0', 'none')
call NERDTreeHighlightFile('scss', 'cyan', 'none', '#5486C0', 'none')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', 'none')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', 'none')
call NERDTreeHighlightFile('ts', 'Blue', 'none', '#6699cc', 'none')
call NERDTreeHighlightFile('ds_store', 'Gray', 'none', '#686868', 'none')
call NERDTreeHighlightFile('gitconfig', 'black', 'none', '#686868', 'none')
call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#7F7F7F', 'none')
"}}}

" Snipppets {{{

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets/neosnippets, ~/.vim/bundle/angular-vim-snippets/snippets'

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: "\<TAB>"

"}}}

" Omni-complete {{{
let g:vimjs#casesensistive = 1
let g:vimjs#smartcomplete = 1
let g:tsuquyomi_disable_quickfix = 1
let g:vim_json_syntax_conceal = 0
" autocmd FileType javascript setlocal completeopt+=menu,preview
set completeopt+=menu,preview,noselect
set splitbelow
let g:deoplete#enable_debug = 2
" set completeopt+=noselect
" let g:deoplete#omni_patterns = {}
" let g:deoplete#omni_patterns.typescript=[
"               \'[^. \t0-9]\.\w*',
"               \'[^. \t0-9]\->\w*',
"               \'[^. \t0-9]\::\w*',
"               \'\s[A-Z][a-z]',
"               \'^\s*@[A-Z][a-z]'
"               \]
"}}}

" Emmet customization {{{
" Enable Emmet in all modes
" Remapping <C-y>, just doesn't cut it.
function! s:expand_html_tab()
  " try to determine if we're within quotes or tags.
  " if so, assume we're in an emmet fill area.
  let line = getline('.')
  if col('.') < len(line)
    let line = matchstr(line, '[">][^<"]*\%'.col('.').'c[^>"]*[<"]')
    if len(line) >= 2
      return "\<C-n>"
    endif
  endif
  " expand anything emmet thinks is expandable.
  if emmet#isExpandable()
    return "\<C-y>,"
  endif
  " return a regular tab character
  return "\<tab>"
endfunction
autocmd FileType html,markdown imap <buffer><expr><tab> <sid>expand_html_tab()
let g:user_emmet_mode='a'
let g:user_emmet_complete_tag = 1
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
"}}}

" unite {{{
"
let g:unite_prompt='» '
let g:unite_data_directory='~/.config/nvim/cache/unite'
let g:unite_source_history_yank_enable=1
let g:unite_source_grep_command='ag'
let g:unite_source_grep_default_opts = '--line-numbers --nocolor --nogroup --smart-case'
let g:unite_source_grep_recursive_opt = ''
let g:unite_source_rec_async_command =['ag', '--follow', '--nocolor', '--nogroup','--hidden', '-g', '', '--ignore', '.git', '--ignore', '*.png', '--ignore', 'lib']

call unite#filters#matcher_default#use(['matcher_fuzzy'])
nnoremap <silent> <C-p> :Unite -auto-resize -start-insert -direction=botright -buffer-name=ctrl-p file_rec/neovim<CR>
nnoremap <silent> <leader>/ :Unite -auto-resize -start-insert -direction=botright -buffer-name=ag grep:.<CR>
nnoremap <silent> <leader>c :Unite -auto-resize -start-insert -direction=botright colorscheme<CR>
nnoremap <silent> <leader>u :Unite neobundle/update<CR>

function! s:unite_settings() "{{{
  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
endfunction "}}}

" Git from unite...ERMERGERD ------------------------------------------------{{{
let g:unite_source_menu_menus = {} " Useful when building interfaces at appropriate places
let g:unite_source_menu_menus.git = {
      \ 'description' : 'Fugitive interface',
      \}
let g:unite_source_menu_menus.git.command_candidates = [
      \[' git status', 'Gstatus'],
      \[' git diff', 'Gvdiff'],
      \[' git commit', 'Gcommit'],
      \[' git stage/add', 'Gwrite'],
      \[' git checkout', 'Gread'],
      \[' git rm', 'Gremove'],
      \[' git cd', 'Gcd'],
      \[' git push', 'exe "Git! push " input("remote/branch: ")'],
      \[' git pull', 'exe "Git! pull " input("remote/branch: ")'],
      \[' git pull rebase', 'exe "Git! pull --rebase " input("branch: ")'],
      \[' git checkout branch', 'exe "Git! checkout " input("branch: ")'],
      \[' git fetch', 'Gfetch'],
      \[' git merge', 'Gmerge'],
      \[' git browse', 'Gbrowse'],
      \[' git head', 'Gedit HEAD^'],
      \[' git parent', 'edit %:h'],
      \[' git log commit buffers', 'Glog --'],
      \[' git log current file', 'Glog -- %'],
      \[' git log last n commits', 'exe "Glog -" input("num: ")'],
      \[' git log first n commits', 'exe "Glog --reverse -" input("num: ")'],
      \[' git log until date', 'exe "Glog --until=" input("day: ")'],
      \[' git log grep commits',  'exe "Glog --grep= " input("string: ")'],
      \[' git log pickaxe',  'exe "Glog -S" input("string: ")'],
      \[' git index', 'exe "Gedit " input("branchname\:filename: ")'],
      \[' git mv', 'exe "Gmove " input("destination: ")'],
      \[' git grep',  'exe "Ggrep " input("string: ")'],
      \[' git prompt', 'exe "Git! " input("command: ")'],
      \] " Append ' --' after log to get commit info commit buffers
nnoremap <silent> <Leader>g :Unite -direction=botright -silent -buffer-name=git -start-insert menu:git<CR>
"}}}
"}}}

" clever_f {{{
" clever-f prompt
let g:clever_f_show_prompt = 1
let g:clever_f_across_no_line = 1
"}}}

" vim-airline {{{
let g:airline#extensions#tabline#enabled = 1
set hidden
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='oceanicnext'
cnoreabbrev <expr> x getcmdtype() == ":" && getcmdline() == 'x' ? 'Sayonara' : 'x'
let g:airline#extensions#tabline#buffer_idx_mode = 1
"}}}

" Linting {{{


let g:neomake_javascript_jshint_maker = {
    \ 'args': ['--verbose'],
    \ 'errorformat': '%A%f: line %l\, col %v\, %m \(%t%*\d\)',
    \ }
" function! neomake#makers#ft#javascript#jshint()
"   return {
"         \ 'args': ['-f', 'compact'],
"         \ 'errorformat': '%E%f: line %l\, col %c\, Error - %m,' .
"         \ '%W%f: line %l\, col %c\, Warning - %m'
"         \ }
" endfunction
let g:neomake_javascript_enabled_makers = ['jshint']
autocmd! BufWritePost * Neomake
" function! JscsFix()
"   let l:winview = winsaveview()
"   % ! jscs -x
"   call winrestview(l:winview)
" endfunction
" command! JscsFix :call JscsFix()
" noremap <leader>j :JscsFix<CR>
"}}}
"}}}
