# ______ _      _        _   _   _       _____       _                  _
# | ___ (_)    | |      | | | | ( )     /  ___|     (_)                | |
# | |_/ /_  ___| | _____| |_| |_|/ ___  \ `--. _ __  _ _ __  _ __   ___| |_ ___
# |  __/| |/ __| |/ / _ | __| __| / __|  `--. | '_ \| | '_ \| '_ \ / _ | __/ __|
# | |   | | (__|   |  __| |_| |_  \__ \ /\__/ | | | | | |_) | |_) |  __| |_\__ \
# \_|   |_|\___|_|\_\___|\__|\__| |___/ \____/|_| |_|_| .__/| .__/ \___|\__|___/
#                                                     | |   | |
#                                                     |_|   |_|
#
# CONTENTS:
# 1.  REACT
# 2.  ASYNC
# 3.  BDD
# 4.  CLASSES
# 5.  CONSOLE
# 6.  DECLARATIONS
# 7.  DOM
# 8.  FLOW-CONTROL
# 9.  FUNCTIONS
# 10.  ITERABLES
# 11. MISC
# 12. MODULES
# 13. NODE-ASSERTS
# 14. NODE-EVENTS
# 15. NODE-EXPRESS
# 16. NODE-MODULES
# 17. OBJECTS
# 18. RETURNS
# 19. TIMERS
# 20. TYPES
#
#
#
# REACT
'.source.js.jsx':
  'import React':
    'prefix': 'imr'
    'body': """
      import React from 'react';
      ${1}
    """

  'import ReactDom':
    'prefix': 'imrd'
    'body': """
      import ReactDom from 'react-dom';
      ${1}
    """

  'import React, { Component }':
    'prefix': 'imrc'
    'body': """
      import React, { Component } from 'react';
      ${1}
    """

  'import React, { Component, PropTypes }':
    'prefix': 'imrcp'
    'body': """
      import React, { Component } from 'react';
      import PropTypes from 'prop-types';
      ${1}
    """

  'React ES7 Component':
    'prefix': 'rc'
    'body': """
      import React, { Component } from 'react';


      export default class ${1:MyComponent} extends Component {

        render() {
          return (
            ${2:<div>MyComponent</div>}
          );
        }

      }
    """

  'React ES7 Component':
    'prefix': 'rcp'
    'body': """
      import React, { Component } from 'react';
      import PropTypes from 'prop-types';


      export default class ${1:MyComponent} extends Component {

        static propTypes = {
          ${2}
        };

        render() {
          return (
            ${3:<div>MyComponent</div>}
          );
        }

      }
    """

  'React ES7 Component with Constructor':
    'prefix': 'rcc'
    'body': """
      import React, { Component } from 'react';


      export default class ${1:MyComponent} extends Component {

        constructor(props) {
          super(props);

          this.state = {
            ${3}
          };
        }

        render() {
          return (
            ${4:<div>MyComponent</div>}
          );
        }

      }
    """

  'React ES7 Component with Constructor':
    'prefix': 'rccp'
    'body': """
      import React, { Component } from 'react';
      import PropTypes from 'prop-types';


      export default class ${1:MyComponent} extends Component {

        static propTypes = {
          ${2}
        };

        constructor(props) {
          super(props);

          this.state = {
            ${3}
          };
        }

        render() {
          return (
            ${4:<div>MyComponent</div>}
          );
        }

      }
    """

  'React ES7 Redux Container':
    'prefix': 'rcredux'
    'body': """
      import React, { Component } from 'react';
      import PropTypes from 'prop-types';
      import { connect } from 'react-redux';


      class ${1:MyComponent} extends Component {

        static propTypes = {
          ${4}
        };

        constructor(props) {
          super(props);

          this.state = {
            ${5}
          };
        }

        render() {
          return (
            ${6:<div>MyComponent</div>}
          );
        }

      }

      const mapStateToProps = (state) => ({
        ${2}
      });

      const mapDispatchToProps = (dispatch) => ({
        ${3}
      });

      export default connect(mapStateToProps, mapDispatchToProps)(${1:MyComponent});
    """

  'React ES7 Redux Container Decorator':
    'prefix': 'rcreduxd'
    'body': """
      import React, { Component } from 'react';
      import PropTypes from 'prop-types';
      import { connect } from 'react-redux';


      @connect(
        state => ({ ${2} }),
      )
      export default class ${1:MyComponent} extends Component {

        static propTypes = {
          ${3}
        };

        constructor(props) {
          super(props);

          this.state = {
            ${4}
          };
        }

        render() {
          return (
            ${5:<div>MyComponent</div>}
          );
        }

      }
    """

  'React ES7 Relay Container':
    'prefix': 'rcrelay'
    'body': """
      import React, { Component } from 'react';
      import PropTypes from 'prop-types';
      import Relay from 'react-relay';


      class ${1:MyComponent} extends Component {

        static propTypes = {
          ${2:viewer}: PropTypes.object.isRequired,
        };

        render() {
          return (
            ${5:<div>MyComponent</div>}
          );
        }

      }

      export default Relay.createContainer(${1:MyComponent}, {
        fragments: {
          ${2:viewer}: () => Relay.QL`
      			fragment on ${3:Viewer} {
      				${4:id}
      			}
          `,
        },
      });
    """

  'React ES7 Relay Container initialVariables':
    'prefix': 'rcrelayv'
    'body': """
      import React, { Component } from 'react';
      import PropTypes from 'prop-types';
      import Relay from 'react-relay';


      class ${1:MyComponent} extends Component {

        static propTypes = {
          ${2:viewer}: PropTypes.object.isRequired,
        };

        render() {
          return (
            ${6:<div>MyComponent</div>}
          );
        }

      }

      export default Relay.createContainer(${1:MyComponent}, {
        initialVariables: {
          ${4}
        },
        fragments: {
          ${2:viewer}: () => Relay.QL`
      			fragment on ${3:Viewer} {
      				${5:id}
      			}
          `,
        },
      });
    """

  'React ES7 Relay Container prepareVariables':
    'prefix': 'rcrelayvp'
    'body': """
      import React, { Component } from 'react';
      import PropTypes from 'prop-types';
      import Relay from 'react-relay';


      class ${1:MyComponent} extends Component {

        static propTypes = {
          ${2:viewer}: PropTypes.object.isRequired,
        };

        render() {
          return (
            ${8:<div>MyComponent</div>}
          );
        }

      }

      export default Relay.createContainer(${1:MyComponent}, {
        initialVariables: {
          ${4}
        },
        prepareVariables(prevVariables) {
          const ${5:include} = !!prevVariables.${6:variable};
          return {
            ...prevVariables,
            ${5:include},
          };
        },
        fragments: {
          ${2:viewer}: () => Relay.QL`
      			fragment on ${3:Viewer} {
      				${7:id}
      			}
          `,
        },
      });
    """

  'React ES7 Component export':
    'prefix': 'rce'
    'body': """
      import React, { Component } from 'react';
      import PropTypes from 'prop-types';


      class ${1:Class} extends Component {

        static propTypes = {
          ${2}
        };

        constructor(props) {
          super(props);

          this.state = {
            ${3}
          };
        }

        render() {
          return (
            ${4:<div>MyComponent</div>}
          );
        }

      }

      export default ${1:Class};
    """

  'React ES7 Functional Component':
    'prefix': 'rfunc'
    'body': """
      import React from 'react';
      import PropTypes from 'prop-types';


      export default function ${1}(${3:props}) {
        return (
          ${4:<div>MyComponent</div>}
        );
      }

      ${1}.propTypes = {
        ${2}
      };
    """

  'React ES7 Functional Arrow Component':
    'prefix': 'rarrow'
    'body': """
      import React from 'react';
      import PropTypes from 'prop-types';


      const $1 = (${3:props}) => (
        ${4:<div />}
      );

      ${1}.propTypes = {
        ${2}
      };

      export default ${1};
    """

  'React ES7 Constructor':
    'prefix': 'rconst'
    'body': """
      constructor(props) {
        super(props);

        ${1}
      }
    """

  'React ES6 bind method to this':
    'prefix': 'rbm',
    'body': """
      this.${1} = this.${1}.bind(this);
    """

  'React ES7 bind method to this':
    'prefix': 'rbm7',
    'body': """
      this.${1} = ::this.${1};
    """

  'React componentWillMount (ES7)':
    'prefix': 'cwm'
    'body': """
      componentWillMount() {
        ${1}
      }
    """

  'React componentDidMount (ES7)':
    'prefix': 'cdm'
    'body': """
      componentDidMount() {
        ${1}
      }
    """

  'React componentWillReceiveProps (ES7)':
    'prefix': 'cwr'
    'body': """
      componentWillReceiveProps(nextProps) {
        ${1}
      }
    """

  'React shouldComponentUpdate (ES7)':
    'prefix': 'scu'
    'body': """
      shouldComponentUpdate(nextProps, nextState) {
        ${1}
      }
    """

  'React componentWillUpdate (ES7)':
    'prefix': 'cwu'
    'body': """
      componentWillUpdate(nextProps, nextState) {
        ${1}
      }
    """

  'React componentDidUpdate (ES7)':
    'prefix': 'cdu'
    'body': """
      componentDidUpdate(prevProps, prevState) {
        ${1}
      }
    """

  'React componentWillUnmount (ES7)':
    'prefix': 'cwun'
    'body': """
      componentWillUnmount() {
        ${1}
      }
    """

  'React this.props':
    'prefix': 'props'
    'body': 'this.props${1}'

  'React this.state':
    'prefix': 'state'
    'body': 'this.state${1}'

  'React cx({ ... }) (ES7)':
    'prefix': 'cx'
    'body': """
      cx({
        ${1}: ${2},
      });
    """

  'React static defaultProps = { ... } (ES7)':
    'prefix': 'dp'
    'body': """
      static defaultProps = {
        ${1}
      };
    """

  'React static propTypes = { ... } (ES7)':
    'prefix': 'pt'
    'body': """
      static propTypes = {
        ${1}: PropTypes.${2:string},
      };
    """

  'React static contextTypes = { ... } (ES7)':
    'prefix': 'ct'
    'body': """
      static contextTypes = {
        ${1}: PropTypes.${2:string},
      };
    """

  'React static childContextTypes = { ... } (ES7)':
    'prefix': 'cct'
    'body': """
      static childContextTypes = {
        ${1}: PropTypes.${2:string},
      };
    """

  'React getChildContext (ES7)':
    'prefix': 'gcct'
    'body': """
      getChildContext() {
        return ${1}
      }
    """

  'React setState({ ... }) (ES7)':
    'prefix': 'sst'
    'body': """
      this.setState({
        ${1}: ${2},
      });
    """

  # PropType array
  'PropTypes.array':
    'prefix': 'pta'
    'body': 'PropTypes.array'
  'PropTypes.array.isRequired':
    'prefix': 'ptar'
    'body': 'PropTypes.array.isRequired'

  # PropType bool
  'PropTypes.bool':
    'prefix': 'ptb'
    'body': 'PropTypes.bool'
  'PropTypes.bool.isRequired':
    'prefix': 'ptbr'
    'body': 'PropTypes.bool.isRequired'

  # PropType function
  'PropTypes.func':
    'prefix': 'ptf'
    'body': 'PropTypes.func'
  'PropTypes.func.isRequired':
    'prefix': 'ptfr'
    'body': 'PropTypes.func.isRequired'

  # PropType number
  'PropTypes.number':
    'prefix': 'ptn'
    'body': 'PropTypes.number'
  'PropTypes.number.isRequired':
    'prefix': 'ptnr'
    'body': 'PropTypes.number.isRequired'

  # PropType object
  'PropTypes.object':
    'prefix': 'ptobj'
    'body': 'PropTypes.object'
  'PropTypes.object.isRequired':
    'prefix': 'ptobjr'
    'body': 'PropTypes.object.isRequired'

  # PropType string
  'PropTypes.string':
    'prefix': 'pts'
    'body': 'PropTypes.string'
  'PropTypes.string.isRequired':
    'prefix': 'ptsr'
    'body': 'PropTypes.string.isRequired'

  # PropType node
  'PropTypes.node':
    'prefix': 'ptnode'
    'body': 'PropTypes.node'
  'PropTypes.node.isRequired':
    'prefix': 'ptnoder'
    'body': 'PropTypes.node.isRequired'

  # PropType element
  'PropTypes.element':
    'prefix': 'pte'
    'body': 'PropTypes.element'
  'PropTypes.element.isRequired':
    'prefix': 'pter'
    'body': 'PropTypes.element.isRequired'

  # PropType instanceOf
  'PropTypes.instanceOf':
    'prefix': 'pti'
    'body': 'PropTypes.instanceOf(${1})'
  'PropTypes.instanceOf.isRequired':
    'prefix': 'ptir'
    'body': 'PropTypes.instanceOf(${1}).isRequired'

  # PropType oneOf
  'PropTypes.oneOf':
    'prefix': 'ptof'
    'body': 'PropTypes.oneOf([${1}])'
  'PropTypes.oneOf.isRequired':
    'prefix': 'ptofr'
    'body': 'PropTypes.oneOf([${1}]).isRequired'

  # PropType oneOfType
  'PropTypes.oneOfType':
    'prefix': 'ptoft'
    'body': """
      PropTypes.oneOfType([
        ${1}
      ])
    """
  'PropTypes.oneOfType.isRequired':
    'prefix': 'ptoftr'
    'body': """
      PropTypes.oneOfType([
        ${1}
      ]).isRequired
    """

  # PropType arrayOf
  'PropTypes.arrayOf':
    'prefix': 'ptao'
    'body': 'PropTypes.arrayOf(${1})'
  'PropTypes.arrayOf.isRequired':
    'prefix': 'ptaor'
    'body': 'PropTypes.arrayOf(${1}).isRequired'

  # PropType objectOf
  'PropTypes.objectOf':
    'prefix': 'ptobjo'
    'body': 'PropTypes.objectOf(${1})'
  'PropTypes.objectOf.isRequired':
    'prefix': 'ptobjor'
    'body': 'PropTypes.objectOf(${1}).isRequired'

  # PropType shape
  'PropTypes.shape({...})':
    'prefix': 'ptshape'
    'body': """
      PropTypes.shape({
        ${1}
      })
    """
  'PropTypes.shape({...}).isRequired':
    'prefix': 'ptshaper'
    'body': """
      PropTypes.shape({
        ${1}
      }).isRequired
    """

  # PropType any
  'PropTypes.any':
    'prefix': 'ptany'
    'body': 'PropTypes.any'
  'PropTypes.any.isRequired':
    'prefix': 'ptanyr'
    'body': 'PropTypes.any.isRequired'


# ASYNC
  'await':
    'prefix': 'a'
    'body': 'await ${0}'

  'Node callback':
    'prefix': 'cb'
    'body': """
      function (err, ${1:value}) {
        if (err) throw err
        ${0}
      }
    """

  'Promise':
    'prefix': 'p',
    'body': """
      new Promise((resolve, reject) => {
        ${0}
      })
    """

  'Promise.then':
    'prefix': 'then'
    'body': """
      ${1:promise}.then((${2:value}) => {
        ${0}
      })
    """

  'chain then':
    'prefix': '.then'
    'body': '.then((${1:value}) => {${0}})'

  'Promise.catch':
    'prefix': 'catch'
    'body': """
      ${1:promise}.catch(${2:err} => {
        ${0}
      })
    """

  'chain catch':
    'prefix': '.catch'
    'body': '.catch((${1:err}) => {${0}})'


# BDD
  'describe':
    'prefix': 'desc'
    'body': """
      describe('${1:description}', () => {
        ${0}
      })
    """

  'it asynchronous':
    'prefix': 'ita'
    'body': """
      it('${1:description}', (done) => {
        ${0}
      })
    """

  'it synchronous':
    'prefix': 'its'
    'body': """
      it('${1:description}', () => {
        ${0}
      })
    """

  'jest before':
    'prefix': 'bf'
    'body': """
      before(() => {
        ${0}
      })
    """

  'jest beforeEach':
    'prefix': 'bfe'
    'body': """
      beforeEach(() => {
        ${0}
      })
    """

  'jest after':
    'prefix': 'aft'
    'body': """
      after(() => {
        ${0}
      })
    """

  'jest afterEach':
    'prefix': 'afe'
    'body': """
      afterEach(() => {
        ${0}
      })
    """


# CLASSES
  'class':
    'prefix': 'cs'
    'body': """
      class ${1:name} {
        constructor (${2:arguments}) {
          ${0}
        }
      }
    """

  'class extends':
    'prefix': 'csx'
    'body': """
    class ${1:name} extends ${2:base} {
      constructor (${3:arguments}) {
        super(${3:arguments});
        ${0}
      }
    }
    """

# CONSOLE
  'console.log':
    'prefix': 'cl'
    'body': 'console.log(${0})'

  'console.error':
    'prefix': 'ce'
    'body': 'console.error(${0})'

  'console.warn':
    'prefix': 'cw'
    'body': 'console.warn(${0})'


# DECLARATIONS
  'let statement':
    'prefix': 'l'
    'body': 'let ${1:name}'

  'let assignment':
    'prefix': 'le'
    'body': 'let ${1:name} = ${2:value}'

  'const statement':
    'prefix': 'c'
    'body': 'const ${1:name}'

  'const assignment':
    'prefix': 'coe'
    'body': 'const ${1:name} = ${2:value}'

  'const assignment yielded':
    'prefix': 'cy'
    'body': 'const ${1:name} = yield ${2:value}'

  'let assignment yielded':
    'prefix': 'ly'
    'body': 'let ${1:name} = yield ${2:value}'

  'const object':
    'prefix': 'co'
    'body': """

    const ${1:name} = {
      ${0}
    }
    """

  'const array':
    'prefix': 'ca'
    'body': """
    const ${1:name} = [
      ${0}
    ]
    """


# DOM
  'addEventListener':
    'prefix': 'ae'
    'body': """
    ${1:document}.addEventListener('${2:event}', ${3:ev} => {
      ${0}
    })
    """

  'removeEventListener':
    'prefix': 'rel'
    'body': '${1:document}.removeEventListener("${2:event}", ${3:listener})'

  'getElementById':
    'prefix': 'gi'
    'body': '${1:document}.getElementById("${2:id}")'

  'getElementsByClassName':
    'prefix': 'gc'
    'body': 'Array.from(${1:document}.getElementsByClassName("${2:class}"))'

  'getElementsByTagName':
    'prefix': 'gt'
    'body': 'Array.from(${1:document}.getElementsByTagName("${2:tag}"))'

  'querySelector':
    'prefix': 'qs'
    'body': '${1:document}.querySelector("${2:selector}")'

  'querySelectorAll':
    'prefix': 'qsa'
    'body': 'Array.from(${1:document}.querySelectorAll("${2:selector}"))'

  'createDocumentFragment':
    'prefix': 'cdf'
    'body': '${1:document}.createDocumentFragment(${2:elem})'

  'createElement':
    'prefix': 'cel'
    'body': '${1:document}.createElement(${2:elem})'

  'classList.add':
    'prefix': 'cla'
    'body': '${1:el}.classList.add("${2:class}")'

  'classList.remove':
    'prefix': 'cr'
    'body': '${1:el}.classList.remove("${2:class}")'

  'classList.toggle':
    'prefix': 'ct'
    'body': '${1:el}.classList.toggle("${2:class}")'

  'getAttribute':
    'prefix': 'ga'
    'body': '${1:el}.getAttribute("${2:attr}")'

  'removeAttribute':
    'prefix': 'ra'
    'body': '${1:el}.removeAttribute("${2:attr}")'

  'setAttribute':
    'prefix': 'sa'
    'body': '${1:el}.setAttribute("${2:attr}", ${3:value})'

  'appendChild':
    'prefix': 'ac'
    'body': '${1:el}.appendChild(${2:elem})'

  'removeChild':
    'prefix': 'rc'
    'body': '${1:el}.removeChild(${2:elem})'


# FLOW-CONTROL
  'if statement':
    'prefix': 'if'
    'body': """
      if (${1:condition}) {
        ${0}
      }
    """

  'else statement':
    'prefix': 'el'
    'body': """
      else {
        ${0}
      }
    """

  'if/else statement':
    'prefix': 'ife'
    'body': """
      if (${1:condition}) {
        ${0}
      } else {

      }
    """

  'else if statement':
    'prefix': 'ei'
    'body': """
      else if (${1:condition}) {
        ${0}
      }
    """

  'let declaration and if statement':
    'prefix': 'lif'
    'body': """
      let ${1}
      if (${0}) {
        ${1} = ${2}
      }
    """

  'for loop':
    'prefix': 'fl'
    'body': """
      for (let ${1:i} = 0, ${2:len} = ${3:iterable}.length; ${1:i} < ${2:len}; ${1:i}++) {
        ${0}
      }
    """

  'for in loop':
    'prefix': 'fi'
    'body': """
      for (let ${1:key} in ${2:source}) {
        if (${2:source}.hasOwnProperty(${1:key})) {
          ${0}
        }
      }
    """

  'for of loop':
    'prefix': 'fo'
    'body': """
      for (let ${1:key} of ${2:source}) {
        ${0}
      }
    """

  'while loop':
    'prefix': 'wl'
    'body': """
      while (${1:condition}) {
        ${0}
      }
    """

  'try/catch':
    'prefix': 'tc'
    'body': """
      try {
        ${0}
      } catch (${1:err}) {

      }
    """

  'try/finally':
    'prefix': 'tf'
    'body': """
      try {
        ${0}
      } finally {

      }
    """

  'try/catch/finally':
    'prefix': 'tcf'
    'body': """
      try {
        ${1}
      } catch (${0:err}) {

      } finally {

      }
    """


# FUNCTIONS
  'anonymous function':
    'prefix': 'f'
    'body': 'function (${1:arguments}) { ${0} }'
  'named function':
    'prefix': 'fn'
    'body': """
      function ${1:name} (${2:arguments}) {
        ${0}
      }
    """

  'async function':
    'prefix': 'asf'
    'body': """
      async function (${1:arguments}) {
        ${0}
      }
    """

  'immediately-invoked function expression':
    'prefix': 'iife'
    'body': """
      ;(function (${1:arguments}) {
        ${0}
      })(${2})
    """

  'function apply':
    'prefix': 'fa'
    'body': """
      ${1:fn}.apply(${2:this}, ${3:arguments})
    """

  'function call':
    'prefix': 'fc'
    'body': """
      ${1:fn}.call(${2:this}, ${3:arguments})
    """

  'function bind':
    'prefix': 'fb'
    'body': """
      ${1:fn}.bind(${2:this}, ${3:arguments})
    """

  'arrow function':
    'prefix': 'af'
    'body': """
      (${1:arguments}) => ${2:statement}
    """

  'arrow function with "body"':
    'prefix': 'afb'
    'body': """
      (${1:arguments}) => {
        ${0}
      }
    """

  'generator':
    'prefix': 'gf'
    'body': """
      function* (${1:arguments}) {
        ${0}
      }
    """

  'named generator':
    'prefix': 'gfn'
    'body': """
      function* ${1:name}(${2:arguments}) {
        ${0}
      }
    """

  'switch function':
    'prefix': 'sf'
    'body': """
      const ${1:name} = (${2:switching}) => ({
          ${3:case}: ${4:value},
        }[${2:switching}] || ${5:default value}
      )
    """


# ITERABLES
  'forEach loop':
    'prefix': 'fe'
    'body': """
      ${1:iterable}.forEach((${2:item}) => {
        ${0}
      })
    """

  'chain forEach':
    'prefix': '.fe'
    'body': '.forEach((${1:item}) => {${0}})'

  'map':
    'prefix': 'map'
    'body': """
      ${1:iterable}.map((${2:item}) => {
        ${0}
      })
    """

  'chain map':
    'prefix': '.map'
    'body': '.map((${1:item}) => {${0}})'
  'reduce':
    'prefix': 'reduce'
    'body': """
      ${1:iterable}.reduce((${2:previous}, ${3:current}) => {
        ${0}
      }${4:, initial})
    """

  'chain reduce':
    'prefix': '.reduce'
    'body': '.reduce((${1:previous}, ${2:current}) => {${0}}${4:, initial})'

  'filter':
    'prefix': 'filter'
    'body': """
      ${1:iterable}.filter((${2:item}) => {
        ${0}
      })
    """

  'chain filter':
    'prefix': '.filter'
    'body': '.filter((${1:item}) => {${0}})'

  'find':
    'prefix': 'find'
    'body': """
      ${1:iterable}.find((${2:item}) => {
        ${0}
      })
    """

  'chain find':
    'prefix': '.find'
    'body': '.find((${1:item}) => {${0}})'

  'every':
    'prefix': 'every'
    'body': """
      ${1:iterable}.every((${2:item}) => {
        ${0}
      })
    """

  'chain every':
    'prefix': '.every'
    'body': '.every((${1:item}) => {${0}})'

  'some':
    'prefix': 'some'
    'body': """
      ${1:iterable}.some((${2:item}) => {
        ${0}
      })
    """

  'chain some':
    'prefix': '.some'
    'body': '.some((${1:item}) => {${0}})'


# MISC
  'use strict':
    'prefix': 'us'
    'body': "'use strict'"

  'JSON.stringify()':
    'prefix': 'js'
    'body': 'JSON.stringify($0)'

  'JSON.parse()':
    'prefix': 'jp'
    'body': 'JSON.parse($0)'


# MODULES
  'module export':
    'prefix': 'ex'
    'body': 'export ${1:member}'

  'module default export':
    'prefix': 'exd'
    'body': 'export default ${1:member}'

  'import module':
    'prefix': 'im'
    'body': "import ${1:*} from '${2:module}'"

  'import module as':
    'prefix': 'ima'
    'body': "import ${1:*} as ${2:name} from '${3:module}'"

  'import module destructured':
    'prefix': 'imd'
    'body': "import {$1} from '${2:module}'"


# NODE-ASSERTS
  'assert.equal':
    'prefix': 'ase'
    'body': 'assert.equal(${1:actual}, ${2:expected})'

  'assert.notEqual':
    'prefix': 'asn'
    'body': 'assert.notEqual(${1:actual}, ${2:expected})'

  'assert.deepEqual':
    'prefix': 'asd'
    'body': 'assert.deepEqual(${1:actual}, ${2:expected})'


# NODE-EVENTS
  'event handler':
    'prefix': 'on'
    'body': """
      ${1:emitter}.on('${2:event}', (${3:arguments}) => {
        ${0}
      });
    """

  'chain event handler':
    'prefix': '.on'
    'body': ".on('${2:event}', (${3:arguments}) => {${0}})"


# NODE-EXPRESS
  'Express middleware':
    'prefix': 'xm'
    'body': """
      function (req, res${1:, next}) {
        ${0}
      }
    """
  'Express error handler':
    'prefix': 'xerr'
    'body': """
      function (err, req, res, next) {
        ${0}
      }
    """


# NODE-MODULES
  'require':
    'prefix': 're'
    'body': "require('${1:module}')"

  "const module = require('module')":
    'prefix': 'cre'
    'body': "const ${1:module} = require('${1:module}')"

  'exports.member':
    'prefix': 'em'
    'body': 'exports.${1:member} = ${2:value}'

  'module.exports':
    'prefix': 'me'
    'body': 'module.exports = ${1:name}'

  'module as class':
    'prefix': 'mc'
    'body': """
      var ${1:name} = (function () {
        function ${1:name}(${2:arguments}) {
          ${0}
        }
        return ${1:name}
      })();

      module.exports = ${1:name}
    """


# OBJECTS
  'method':
    'prefix': 'm'
    'body': """
      ${1:method} (${2:arguments}) {
        ${0}
      }
    """

  'getter':
    'prefix': 'get'
    'body': """
      get ${1:property}() {
        ${0}
      }
    """

  'setter':
    'prefix': 'set'
    'body': """
      set ${1:property}(${2:value}) {
        ${0}
      }
    """

  'getter + setter':
    'prefix': 'gs'
    'body': """
      get ${1:property}() {
        ${0}
      }
      set ${1:property}(${2:value}) {

      }
    """

  'prototype method':
    'prefix': 'proto'
    'body': """
      ${1:Class}.prototype.${2:method} = function (${3:arguments}) {
        ${0}
      }
    """

  'chain prototype method':
    'prefix': '.proto'
    'body': """
      .prototype.${2:methodName} = function (${3:arguments}) {
        ${0}
      }
    """
  'Object.assign':
    'prefix': 'oa'
    'body': 'Object.assign(${1:dest}, ${2:source})'

  'Object.keys':
    'prefix': 'ok'
    'body': 'Object.keys(${1:obj})'


# RETURNS
  'return':
    'prefix': 'r'
    'body': 'return ${0}'

  'yield':
    'prefix': 'y'
    'body': 'yield ${0}'

  'return this':
    'prefix': 'rth'
    'body': 'return this'

  'return null':
    'prefix': 'rn'
    'body': 'return null'

  'return true':
    'prefix': 'rt'
    'body': 'return true'

  'return false':
    'prefix': 'rf'
    'body': 'return false'

  'return 0':
    'prefix': 'r0'
    'body': 'return 0'

  'return -1':
    'prefix': 'r-1'
    'body': 'return -1'

  'return promise':
    'prefix': 'rp'
    'body': """
      return new Promise((resolve, reject) => {
        ${0}
      })
    """


# TIMERS
  'setTimeout':
    'prefix': 'st'
    'body': """
      setTimeout(() => {
        ${0}
      }, ${1:delay})
    """

  'setInterval':
    'prefix': 'si'
    'body': """
      setInterval(() => {
        ${0}
      }, ${1:delay})
    """

  'setImmediate':
    'prefix': 'sim'
    'body': """
      setImmediate(() => {
        ${0}
      })
    """


# TYPES
  'String':
    'prefix': 'S'
    'body': 'String'

  'Number':
    'prefix': 'N'
    'body': 'Number'

  'Object':
    'prefix': 'O'
    'body': 'Object'

  'Array':
    'prefix': 'A'
    'body': 'Array'

  'Date':
    'prefix': 'D'
    'body': 'Date'

  'RegExp':
    'prefix': 'Rx'
    'body': 'RegExp'

  'typeof':
    'prefix': 'tof'
    'body': "typeof ${1:source} === '${2:undefined}'"

  'instanceof':
    'prefix': 'iof'
    'body': '${1:source} instanceof ${2:Object}'

  'Array.isArray()':
    'prefix': 'ia'
    'body': 'Array.isArray(${1:source})'
